def bad:  fiber[ n ] n/0
def good: fiber[ n ] do assert( n = 123, "1" ) for n/1

assert( type( bad ) = 'Fib', "2" )
assert( type( good ) = 'Fib', "3" )

cont( bad, { 123 } )
assert( state( bad ) = 'failed', "4" )
assert( type( errval( bad ) ) = 'Str', "5" )
assert( type( trace( bad ) ) = 'Rec', "6" )

cont( good, { 123 } )
assert( state( good ) = 'finished', "7" )
assert( errval( good ) != udf, "8" )
assert( trace( good ) != udf, "9" )

def fib: fiber[ v ] do
    assert( v = 'cont1', "10" )
    def v: yield( 'yield1' )
    assert( v = 'cont2', "11" )
    def v: yield( 'yield2' )
    assert( v = 'cont3', "12" )
for 'yield3'

def v: cont( fib, { 'cont1' } )
assert( v = 'yield1', "13" )
def v: cont( fib, { 'cont2' } )
assert( v = 'yield2', "14" )
def v: cont( fib, { 'cont3' } )
assert( v = 'yield3', "15" )
assert( state( fib ) = 'finished', "16" )
